name: AutoIssueSync Workflow

on:
  push:
    branches:
      - master  # Cambia esto si usas otra rama principal

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'
    
    - name: Install Dependencies
      run: npm install @octokit/rest
    
    # Instalar la dependencia `node-fetch`
    - name: Install Node.js Dependencies
      run: npm install node-fetch@2
      

    - name: List Directory Structure
      run: ls -R

    - name: Build AutoIssueSync.Analyzer
      run: dotnet build AutoIssueSync.Analyzer/AutoIssueSync.Analyzer.csproj --configuration Release

    # Ejecutar el an√°lisis de Roslyn para generar `issues.json`
    - name: Run Code Analysis with Roslyn
      run: |
        dotnet AutoIssueSync.Analyzer/bin/Release/net6.0/AutoIssueSync.Analyzer.dll ./AutoIssueSync
      env:
        TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}

    # Crear los issues en GitHub usando un script personalizado
    - name: Create Issues Based on Analysis
      run: |
        echo "Creando issues basados en el archivo issues.json..."
        node .github/scripts/create-issues.mjs
      env:
        TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
